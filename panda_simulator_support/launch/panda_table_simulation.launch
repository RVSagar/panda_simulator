<launch>
    <!-- new gripper_center link argument -->
    <arg name="gripper_center" default="true"/>

    <!-- new gripper_center link argument -->
    <arg name="controller_type" default="position"/>
    
    <param name="robot_description" command="$(find xacro)/xacro --inorder  '$(find panda_simulator_support)/urdf/panda_arm_hand_table.urdf.xacro' 'gripper_center:=$(arg gripper_center)' 'controller_type:=$(arg controller_type)'"/>

    <!-- GAZEBO arguments -->
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>
    <arg name="verbose" default="true"/>
    <arg name="load_gripper" default="true"/>

    <!--launch GAZEBO with own world configuration -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <!-- <arg name="world_name" value="$(find robotics_assisted_tomography)/worlds/tomography.world"/> -->
        <arg name="debug" value="$(arg debug)"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="headless" value="$(arg headless)"/>
        <arg name="verbose" value="$(arg verbose)"/>
    </include>

    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model panda"/>

    <!-- Load joint controller configurations from YAML file to parameter server -->
    <group if="$(eval arg('controller_type') == 'position')">
        <rosparam file="$(find panda_simulator_support)/config/panda_control_position.yaml" command="load"/>
    </group>

    <group if="$(eval arg('controller_type') == 'effort')">
        <rosparam file="$(find panda_simulator_support)/config/panda_control_effort.yaml" command="load"/>
    </group>

    <!-- load the controllers -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="joint_state_controller panda_arm_controller" />
    <node if="$(arg load_gripper)" name="controller_spawner_hand" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="panda_hand_controller" />
    
    <!-- convert joint states to TF transforms for rviz, etc -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

    <include file="$(find panda_table_moveit_config)/launch/planning_context.launch">
        <arg name="load_robot_description" value="false"/>
	    <arg name="load_gripper" value="$(arg load_gripper)" />
        <arg name="gripper_center" value="$(arg gripper_center)"/>
    </include>
    <include file="$(find panda_table_moveit_config)/launch/move_group.launch" >
	<arg name="load_gripper" value="$(arg load_gripper)" />
        <arg name="gripper_center" value="$(arg gripper_center)"/>
    </include>
    <group if="$(arg gui)">
        <include file="$(find panda_table_moveit_config)/launch/moveit_rviz.launch" />
    </group>

    <node name="joint_state_desired_publisher" pkg="topic_tools" type="relay" args="joint_states joint_states_desired" />

    <!-- launch robot control node for moveit motion planning -->
    <node pkg="panda_simulation" type="robot_control_node" name="robot_control_node" output="screen" />

    <!-- Only need the nodes below if using position controller-->
    <group if="$(eval arg('controller_type') == 'position')">
        <!-- load (not start!) custom joint position controller -->
        <node pkg="controller_manager" type="spawner" name="joint_position_launcher" args="--stopped joint_position_controller" />

        <!-- run custom node for automatic intialization -->
        <node pkg="panda_simulation" type="robot_state_initializer_node" name="robot_state_initializer_node" />
    </group>

</launch>

